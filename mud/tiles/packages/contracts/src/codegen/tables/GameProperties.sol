// SPDX-License-Identifier: MIT
pragma solidity >=0.8.24;

/* Autogenerated file. Do not edit manually. */

// Import store internals
import { IStore } from "@latticexyz/store/src/IStore.sol";
import { StoreSwitch } from "@latticexyz/store/src/StoreSwitch.sol";
import { StoreCore } from "@latticexyz/store/src/StoreCore.sol";
import { Bytes } from "@latticexyz/store/src/Bytes.sol";
import { Memory } from "@latticexyz/store/src/Memory.sol";
import { SliceLib } from "@latticexyz/store/src/Slice.sol";
import { EncodeArray } from "@latticexyz/store/src/tightcoder/EncodeArray.sol";
import { FieldLayout } from "@latticexyz/store/src/FieldLayout.sol";
import { Schema } from "@latticexyz/store/src/Schema.sol";
import { EncodedLengths, EncodedLengthsLib } from "@latticexyz/store/src/EncodedLengths.sol";
import { ResourceId } from "@latticexyz/store/src/ResourceId.sol";

struct GamePropertiesData {
  uint256 xSize;
  uint256 ySize;
  uint256 baseRate;
  uint256 bonusSame;
  uint256 bonusEnemy;
  uint256 bonusVictim;
  uint256 pricePerTile;
}

library GameProperties {
  // Hex below is the result of `WorldResourceIdLib.encode({ namespace: "app", name: "GameProperties", typeId: RESOURCE_TABLE });`
  ResourceId constant _tableId = ResourceId.wrap(0x7462617070000000000000000000000047616d6550726f706572746965730000);

  FieldLayout constant _fieldLayout =
    FieldLayout.wrap(0x00e0070020202020202020000000000000000000000000000000000000000000);

  // Hex-encoded key schema of (uint256)
  Schema constant _keySchema = Schema.wrap(0x002001001f000000000000000000000000000000000000000000000000000000);
  // Hex-encoded value schema of (uint256, uint256, uint256, uint256, uint256, uint256, uint256)
  Schema constant _valueSchema = Schema.wrap(0x00e007001f1f1f1f1f1f1f000000000000000000000000000000000000000000);

  /**
   * @notice Get the table's key field names.
   * @return keyNames An array of strings with the names of key fields.
   */
  function getKeyNames() internal pure returns (string[] memory keyNames) {
    keyNames = new string[](1);
    keyNames[0] = "gameId";
  }

  /**
   * @notice Get the table's value field names.
   * @return fieldNames An array of strings with the names of value fields.
   */
  function getFieldNames() internal pure returns (string[] memory fieldNames) {
    fieldNames = new string[](7);
    fieldNames[0] = "xSize";
    fieldNames[1] = "ySize";
    fieldNames[2] = "baseRate";
    fieldNames[3] = "bonusSame";
    fieldNames[4] = "bonusEnemy";
    fieldNames[5] = "bonusVictim";
    fieldNames[6] = "pricePerTile";
  }

  /**
   * @notice Register the table with its config.
   */
  function register() internal {
    StoreSwitch.registerTable(_tableId, _fieldLayout, _keySchema, _valueSchema, getKeyNames(), getFieldNames());
  }

  /**
   * @notice Register the table with its config.
   */
  function _register() internal {
    StoreCore.registerTable(_tableId, _fieldLayout, _keySchema, _valueSchema, getKeyNames(), getFieldNames());
  }

  /**
   * @notice Get xSize.
   */
  function getXSize(uint256 gameId) internal view returns (uint256 xSize) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(gameId));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 0, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Get xSize.
   */
  function _getXSize(uint256 gameId) internal view returns (uint256 xSize) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(gameId));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 0, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Set xSize.
   */
  function setXSize(uint256 gameId, uint256 xSize) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(gameId));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 0, abi.encodePacked((xSize)), _fieldLayout);
  }

  /**
   * @notice Set xSize.
   */
  function _setXSize(uint256 gameId, uint256 xSize) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(gameId));

    StoreCore.setStaticField(_tableId, _keyTuple, 0, abi.encodePacked((xSize)), _fieldLayout);
  }

  /**
   * @notice Get ySize.
   */
  function getYSize(uint256 gameId) internal view returns (uint256 ySize) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(gameId));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 1, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Get ySize.
   */
  function _getYSize(uint256 gameId) internal view returns (uint256 ySize) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(gameId));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 1, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Set ySize.
   */
  function setYSize(uint256 gameId, uint256 ySize) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(gameId));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 1, abi.encodePacked((ySize)), _fieldLayout);
  }

  /**
   * @notice Set ySize.
   */
  function _setYSize(uint256 gameId, uint256 ySize) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(gameId));

    StoreCore.setStaticField(_tableId, _keyTuple, 1, abi.encodePacked((ySize)), _fieldLayout);
  }

  /**
   * @notice Get baseRate.
   */
  function getBaseRate(uint256 gameId) internal view returns (uint256 baseRate) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(gameId));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 2, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Get baseRate.
   */
  function _getBaseRate(uint256 gameId) internal view returns (uint256 baseRate) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(gameId));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 2, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Set baseRate.
   */
  function setBaseRate(uint256 gameId, uint256 baseRate) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(gameId));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 2, abi.encodePacked((baseRate)), _fieldLayout);
  }

  /**
   * @notice Set baseRate.
   */
  function _setBaseRate(uint256 gameId, uint256 baseRate) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(gameId));

    StoreCore.setStaticField(_tableId, _keyTuple, 2, abi.encodePacked((baseRate)), _fieldLayout);
  }

  /**
   * @notice Get bonusSame.
   */
  function getBonusSame(uint256 gameId) internal view returns (uint256 bonusSame) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(gameId));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 3, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Get bonusSame.
   */
  function _getBonusSame(uint256 gameId) internal view returns (uint256 bonusSame) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(gameId));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 3, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Set bonusSame.
   */
  function setBonusSame(uint256 gameId, uint256 bonusSame) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(gameId));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 3, abi.encodePacked((bonusSame)), _fieldLayout);
  }

  /**
   * @notice Set bonusSame.
   */
  function _setBonusSame(uint256 gameId, uint256 bonusSame) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(gameId));

    StoreCore.setStaticField(_tableId, _keyTuple, 3, abi.encodePacked((bonusSame)), _fieldLayout);
  }

  /**
   * @notice Get bonusEnemy.
   */
  function getBonusEnemy(uint256 gameId) internal view returns (uint256 bonusEnemy) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(gameId));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 4, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Get bonusEnemy.
   */
  function _getBonusEnemy(uint256 gameId) internal view returns (uint256 bonusEnemy) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(gameId));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 4, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Set bonusEnemy.
   */
  function setBonusEnemy(uint256 gameId, uint256 bonusEnemy) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(gameId));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 4, abi.encodePacked((bonusEnemy)), _fieldLayout);
  }

  /**
   * @notice Set bonusEnemy.
   */
  function _setBonusEnemy(uint256 gameId, uint256 bonusEnemy) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(gameId));

    StoreCore.setStaticField(_tableId, _keyTuple, 4, abi.encodePacked((bonusEnemy)), _fieldLayout);
  }

  /**
   * @notice Get bonusVictim.
   */
  function getBonusVictim(uint256 gameId) internal view returns (uint256 bonusVictim) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(gameId));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 5, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Get bonusVictim.
   */
  function _getBonusVictim(uint256 gameId) internal view returns (uint256 bonusVictim) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(gameId));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 5, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Set bonusVictim.
   */
  function setBonusVictim(uint256 gameId, uint256 bonusVictim) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(gameId));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 5, abi.encodePacked((bonusVictim)), _fieldLayout);
  }

  /**
   * @notice Set bonusVictim.
   */
  function _setBonusVictim(uint256 gameId, uint256 bonusVictim) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(gameId));

    StoreCore.setStaticField(_tableId, _keyTuple, 5, abi.encodePacked((bonusVictim)), _fieldLayout);
  }

  /**
   * @notice Get pricePerTile.
   */
  function getPricePerTile(uint256 gameId) internal view returns (uint256 pricePerTile) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(gameId));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 6, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Get pricePerTile.
   */
  function _getPricePerTile(uint256 gameId) internal view returns (uint256 pricePerTile) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(gameId));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 6, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Set pricePerTile.
   */
  function setPricePerTile(uint256 gameId, uint256 pricePerTile) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(gameId));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 6, abi.encodePacked((pricePerTile)), _fieldLayout);
  }

  /**
   * @notice Set pricePerTile.
   */
  function _setPricePerTile(uint256 gameId, uint256 pricePerTile) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(gameId));

    StoreCore.setStaticField(_tableId, _keyTuple, 6, abi.encodePacked((pricePerTile)), _fieldLayout);
  }

  /**
   * @notice Get the full data.
   */
  function get(uint256 gameId) internal view returns (GamePropertiesData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(gameId));

    (bytes memory _staticData, EncodedLengths _encodedLengths, bytes memory _dynamicData) = StoreSwitch.getRecord(
      _tableId,
      _keyTuple,
      _fieldLayout
    );
    return decode(_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Get the full data.
   */
  function _get(uint256 gameId) internal view returns (GamePropertiesData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(gameId));

    (bytes memory _staticData, EncodedLengths _encodedLengths, bytes memory _dynamicData) = StoreCore.getRecord(
      _tableId,
      _keyTuple,
      _fieldLayout
    );
    return decode(_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using individual values.
   */
  function set(
    uint256 gameId,
    uint256 xSize,
    uint256 ySize,
    uint256 baseRate,
    uint256 bonusSame,
    uint256 bonusEnemy,
    uint256 bonusVictim,
    uint256 pricePerTile
  ) internal {
    bytes memory _staticData = encodeStatic(xSize, ySize, baseRate, bonusSame, bonusEnemy, bonusVictim, pricePerTile);

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(gameId));

    StoreSwitch.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using individual values.
   */
  function _set(
    uint256 gameId,
    uint256 xSize,
    uint256 ySize,
    uint256 baseRate,
    uint256 bonusSame,
    uint256 bonusEnemy,
    uint256 bonusVictim,
    uint256 pricePerTile
  ) internal {
    bytes memory _staticData = encodeStatic(xSize, ySize, baseRate, bonusSame, bonusEnemy, bonusVictim, pricePerTile);

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(gameId));

    StoreCore.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData, _fieldLayout);
  }

  /**
   * @notice Set the full data using the data struct.
   */
  function set(uint256 gameId, GamePropertiesData memory _table) internal {
    bytes memory _staticData = encodeStatic(
      _table.xSize,
      _table.ySize,
      _table.baseRate,
      _table.bonusSame,
      _table.bonusEnemy,
      _table.bonusVictim,
      _table.pricePerTile
    );

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(gameId));

    StoreSwitch.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using the data struct.
   */
  function _set(uint256 gameId, GamePropertiesData memory _table) internal {
    bytes memory _staticData = encodeStatic(
      _table.xSize,
      _table.ySize,
      _table.baseRate,
      _table.bonusSame,
      _table.bonusEnemy,
      _table.bonusVictim,
      _table.pricePerTile
    );

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(gameId));

    StoreCore.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData, _fieldLayout);
  }

  /**
   * @notice Decode the tightly packed blob of static data using this table's field layout.
   */
  function decodeStatic(
    bytes memory _blob
  )
    internal
    pure
    returns (
      uint256 xSize,
      uint256 ySize,
      uint256 baseRate,
      uint256 bonusSame,
      uint256 bonusEnemy,
      uint256 bonusVictim,
      uint256 pricePerTile
    )
  {
    xSize = (uint256(Bytes.getBytes32(_blob, 0)));

    ySize = (uint256(Bytes.getBytes32(_blob, 32)));

    baseRate = (uint256(Bytes.getBytes32(_blob, 64)));

    bonusSame = (uint256(Bytes.getBytes32(_blob, 96)));

    bonusEnemy = (uint256(Bytes.getBytes32(_blob, 128)));

    bonusVictim = (uint256(Bytes.getBytes32(_blob, 160)));

    pricePerTile = (uint256(Bytes.getBytes32(_blob, 192)));
  }

  /**
   * @notice Decode the tightly packed blobs using this table's field layout.
   * @param _staticData Tightly packed static fields.
   *
   *
   */
  function decode(
    bytes memory _staticData,
    EncodedLengths,
    bytes memory
  ) internal pure returns (GamePropertiesData memory _table) {
    (
      _table.xSize,
      _table.ySize,
      _table.baseRate,
      _table.bonusSame,
      _table.bonusEnemy,
      _table.bonusVictim,
      _table.pricePerTile
    ) = decodeStatic(_staticData);
  }

  /**
   * @notice Delete all data for given keys.
   */
  function deleteRecord(uint256 gameId) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(gameId));

    StoreSwitch.deleteRecord(_tableId, _keyTuple);
  }

  /**
   * @notice Delete all data for given keys.
   */
  function _deleteRecord(uint256 gameId) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(gameId));

    StoreCore.deleteRecord(_tableId, _keyTuple, _fieldLayout);
  }

  /**
   * @notice Tightly pack static (fixed length) data using this table's schema.
   * @return The static data, encoded into a sequence of bytes.
   */
  function encodeStatic(
    uint256 xSize,
    uint256 ySize,
    uint256 baseRate,
    uint256 bonusSame,
    uint256 bonusEnemy,
    uint256 bonusVictim,
    uint256 pricePerTile
  ) internal pure returns (bytes memory) {
    return abi.encodePacked(xSize, ySize, baseRate, bonusSame, bonusEnemy, bonusVictim, pricePerTile);
  }

  /**
   * @notice Encode all of a record's fields.
   * @return The static (fixed length) data, encoded into a sequence of bytes.
   * @return The lengths of the dynamic fields (packed into a single bytes32 value).
   * @return The dynamic (variable length) data, encoded into a sequence of bytes.
   */
  function encode(
    uint256 xSize,
    uint256 ySize,
    uint256 baseRate,
    uint256 bonusSame,
    uint256 bonusEnemy,
    uint256 bonusVictim,
    uint256 pricePerTile
  ) internal pure returns (bytes memory, EncodedLengths, bytes memory) {
    bytes memory _staticData = encodeStatic(xSize, ySize, baseRate, bonusSame, bonusEnemy, bonusVictim, pricePerTile);

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    return (_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Encode keys as a bytes32 array using this table's field layout.
   */
  function encodeKeyTuple(uint256 gameId) internal pure returns (bytes32[] memory) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(gameId));

    return _keyTuple;
  }
}
