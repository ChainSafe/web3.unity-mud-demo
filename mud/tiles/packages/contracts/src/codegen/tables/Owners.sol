// SPDX-License-Identifier: MIT
pragma solidity >=0.8.24;

/* Autogenerated file. Do not edit manually. */

// Import store internals
import { IStore } from "@latticexyz/store/src/IStore.sol";
import { StoreSwitch } from "@latticexyz/store/src/StoreSwitch.sol";
import { StoreCore } from "@latticexyz/store/src/StoreCore.sol";
import { Bytes } from "@latticexyz/store/src/Bytes.sol";
import { Memory } from "@latticexyz/store/src/Memory.sol";
import { SliceLib } from "@latticexyz/store/src/Slice.sol";
import { EncodeArray } from "@latticexyz/store/src/tightcoder/EncodeArray.sol";
import { FieldLayout } from "@latticexyz/store/src/FieldLayout.sol";
import { Schema } from "@latticexyz/store/src/Schema.sol";
import { EncodedLengths, EncodedLengthsLib } from "@latticexyz/store/src/EncodedLengths.sol";
import { ResourceId } from "@latticexyz/store/src/ResourceId.sol";

struct OwnersData {
  uint256 rate;
  uint256 lastUpdateTime;
  uint256 unclaimed;
  uint256[] tileIds;
}

library Owners {
  // Hex below is the result of `WorldResourceIdLib.encode({ namespace: "app", name: "Owners", typeId: RESOURCE_TABLE });`
  ResourceId constant _tableId = ResourceId.wrap(0x746261707000000000000000000000004f776e65727300000000000000000000);

  FieldLayout constant _fieldLayout =
    FieldLayout.wrap(0x0060030120202000000000000000000000000000000000000000000000000000);

  // Hex-encoded key schema of (address)
  Schema constant _keySchema = Schema.wrap(0x0014010061000000000000000000000000000000000000000000000000000000);
  // Hex-encoded value schema of (uint256, uint256, uint256, uint256[])
  Schema constant _valueSchema = Schema.wrap(0x006003011f1f1f81000000000000000000000000000000000000000000000000);

  /**
   * @notice Get the table's key field names.
   * @return keyNames An array of strings with the names of key fields.
   */
  function getKeyNames() internal pure returns (string[] memory keyNames) {
    keyNames = new string[](1);
    keyNames[0] = "ownerAddress";
  }

  /**
   * @notice Get the table's value field names.
   * @return fieldNames An array of strings with the names of value fields.
   */
  function getFieldNames() internal pure returns (string[] memory fieldNames) {
    fieldNames = new string[](4);
    fieldNames[0] = "rate";
    fieldNames[1] = "lastUpdateTime";
    fieldNames[2] = "unclaimed";
    fieldNames[3] = "tileIds";
  }

  /**
   * @notice Register the table with its config.
   */
  function register() internal {
    StoreSwitch.registerTable(_tableId, _fieldLayout, _keySchema, _valueSchema, getKeyNames(), getFieldNames());
  }

  /**
   * @notice Register the table with its config.
   */
  function _register() internal {
    StoreCore.registerTable(_tableId, _fieldLayout, _keySchema, _valueSchema, getKeyNames(), getFieldNames());
  }

  /**
   * @notice Get rate.
   */
  function getRate(address ownerAddress) internal view returns (uint256 rate) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160(ownerAddress)));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 0, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Get rate.
   */
  function _getRate(address ownerAddress) internal view returns (uint256 rate) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160(ownerAddress)));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 0, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Set rate.
   */
  function setRate(address ownerAddress, uint256 rate) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160(ownerAddress)));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 0, abi.encodePacked((rate)), _fieldLayout);
  }

  /**
   * @notice Set rate.
   */
  function _setRate(address ownerAddress, uint256 rate) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160(ownerAddress)));

    StoreCore.setStaticField(_tableId, _keyTuple, 0, abi.encodePacked((rate)), _fieldLayout);
  }

  /**
   * @notice Get lastUpdateTime.
   */
  function getLastUpdateTime(address ownerAddress) internal view returns (uint256 lastUpdateTime) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160(ownerAddress)));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 1, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Get lastUpdateTime.
   */
  function _getLastUpdateTime(address ownerAddress) internal view returns (uint256 lastUpdateTime) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160(ownerAddress)));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 1, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Set lastUpdateTime.
   */
  function setLastUpdateTime(address ownerAddress, uint256 lastUpdateTime) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160(ownerAddress)));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 1, abi.encodePacked((lastUpdateTime)), _fieldLayout);
  }

  /**
   * @notice Set lastUpdateTime.
   */
  function _setLastUpdateTime(address ownerAddress, uint256 lastUpdateTime) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160(ownerAddress)));

    StoreCore.setStaticField(_tableId, _keyTuple, 1, abi.encodePacked((lastUpdateTime)), _fieldLayout);
  }

  /**
   * @notice Get unclaimed.
   */
  function getUnclaimed(address ownerAddress) internal view returns (uint256 unclaimed) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160(ownerAddress)));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 2, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Get unclaimed.
   */
  function _getUnclaimed(address ownerAddress) internal view returns (uint256 unclaimed) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160(ownerAddress)));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 2, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Set unclaimed.
   */
  function setUnclaimed(address ownerAddress, uint256 unclaimed) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160(ownerAddress)));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 2, abi.encodePacked((unclaimed)), _fieldLayout);
  }

  /**
   * @notice Set unclaimed.
   */
  function _setUnclaimed(address ownerAddress, uint256 unclaimed) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160(ownerAddress)));

    StoreCore.setStaticField(_tableId, _keyTuple, 2, abi.encodePacked((unclaimed)), _fieldLayout);
  }

  /**
   * @notice Get tileIds.
   */
  function getTileIds(address ownerAddress) internal view returns (uint256[] memory tileIds) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160(ownerAddress)));

    bytes memory _blob = StoreSwitch.getDynamicField(_tableId, _keyTuple, 0);
    return (SliceLib.getSubslice(_blob, 0, _blob.length).decodeArray_uint256());
  }

  /**
   * @notice Get tileIds.
   */
  function _getTileIds(address ownerAddress) internal view returns (uint256[] memory tileIds) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160(ownerAddress)));

    bytes memory _blob = StoreCore.getDynamicField(_tableId, _keyTuple, 0);
    return (SliceLib.getSubslice(_blob, 0, _blob.length).decodeArray_uint256());
  }

  /**
   * @notice Set tileIds.
   */
  function setTileIds(address ownerAddress, uint256[] memory tileIds) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160(ownerAddress)));

    StoreSwitch.setDynamicField(_tableId, _keyTuple, 0, EncodeArray.encode((tileIds)));
  }

  /**
   * @notice Set tileIds.
   */
  function _setTileIds(address ownerAddress, uint256[] memory tileIds) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160(ownerAddress)));

    StoreCore.setDynamicField(_tableId, _keyTuple, 0, EncodeArray.encode((tileIds)));
  }

  /**
   * @notice Get the length of tileIds.
   */
  function lengthTileIds(address ownerAddress) internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160(ownerAddress)));

    uint256 _byteLength = StoreSwitch.getDynamicFieldLength(_tableId, _keyTuple, 0);
    unchecked {
      return _byteLength / 32;
    }
  }

  /**
   * @notice Get the length of tileIds.
   */
  function _lengthTileIds(address ownerAddress) internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160(ownerAddress)));

    uint256 _byteLength = StoreCore.getDynamicFieldLength(_tableId, _keyTuple, 0);
    unchecked {
      return _byteLength / 32;
    }
  }

  /**
   * @notice Get an item of tileIds.
   * @dev Reverts with Store_IndexOutOfBounds if `_index` is out of bounds for the array.
   */
  function getItemTileIds(address ownerAddress, uint256 _index) internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160(ownerAddress)));

    unchecked {
      bytes memory _blob = StoreSwitch.getDynamicFieldSlice(_tableId, _keyTuple, 0, _index * 32, (_index + 1) * 32);
      return (uint256(bytes32(_blob)));
    }
  }

  /**
   * @notice Get an item of tileIds.
   * @dev Reverts with Store_IndexOutOfBounds if `_index` is out of bounds for the array.
   */
  function _getItemTileIds(address ownerAddress, uint256 _index) internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160(ownerAddress)));

    unchecked {
      bytes memory _blob = StoreCore.getDynamicFieldSlice(_tableId, _keyTuple, 0, _index * 32, (_index + 1) * 32);
      return (uint256(bytes32(_blob)));
    }
  }

  /**
   * @notice Push an element to tileIds.
   */
  function pushTileIds(address ownerAddress, uint256 _element) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160(ownerAddress)));

    StoreSwitch.pushToDynamicField(_tableId, _keyTuple, 0, abi.encodePacked((_element)));
  }

  /**
   * @notice Push an element to tileIds.
   */
  function _pushTileIds(address ownerAddress, uint256 _element) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160(ownerAddress)));

    StoreCore.pushToDynamicField(_tableId, _keyTuple, 0, abi.encodePacked((_element)));
  }

  /**
   * @notice Pop an element from tileIds.
   */
  function popTileIds(address ownerAddress) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160(ownerAddress)));

    StoreSwitch.popFromDynamicField(_tableId, _keyTuple, 0, 32);
  }

  /**
   * @notice Pop an element from tileIds.
   */
  function _popTileIds(address ownerAddress) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160(ownerAddress)));

    StoreCore.popFromDynamicField(_tableId, _keyTuple, 0, 32);
  }

  /**
   * @notice Update an element of tileIds at `_index`.
   */
  function updateTileIds(address ownerAddress, uint256 _index, uint256 _element) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160(ownerAddress)));

    unchecked {
      bytes memory _encoded = abi.encodePacked((_element));
      StoreSwitch.spliceDynamicData(_tableId, _keyTuple, 0, uint40(_index * 32), uint40(_encoded.length), _encoded);
    }
  }

  /**
   * @notice Update an element of tileIds at `_index`.
   */
  function _updateTileIds(address ownerAddress, uint256 _index, uint256 _element) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160(ownerAddress)));

    unchecked {
      bytes memory _encoded = abi.encodePacked((_element));
      StoreCore.spliceDynamicData(_tableId, _keyTuple, 0, uint40(_index * 32), uint40(_encoded.length), _encoded);
    }
  }

  /**
   * @notice Get the full data.
   */
  function get(address ownerAddress) internal view returns (OwnersData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160(ownerAddress)));

    (bytes memory _staticData, EncodedLengths _encodedLengths, bytes memory _dynamicData) = StoreSwitch.getRecord(
      _tableId,
      _keyTuple,
      _fieldLayout
    );
    return decode(_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Get the full data.
   */
  function _get(address ownerAddress) internal view returns (OwnersData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160(ownerAddress)));

    (bytes memory _staticData, EncodedLengths _encodedLengths, bytes memory _dynamicData) = StoreCore.getRecord(
      _tableId,
      _keyTuple,
      _fieldLayout
    );
    return decode(_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using individual values.
   */
  function set(
    address ownerAddress,
    uint256 rate,
    uint256 lastUpdateTime,
    uint256 unclaimed,
    uint256[] memory tileIds
  ) internal {
    bytes memory _staticData = encodeStatic(rate, lastUpdateTime, unclaimed);

    EncodedLengths _encodedLengths = encodeLengths(tileIds);
    bytes memory _dynamicData = encodeDynamic(tileIds);

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160(ownerAddress)));

    StoreSwitch.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using individual values.
   */
  function _set(
    address ownerAddress,
    uint256 rate,
    uint256 lastUpdateTime,
    uint256 unclaimed,
    uint256[] memory tileIds
  ) internal {
    bytes memory _staticData = encodeStatic(rate, lastUpdateTime, unclaimed);

    EncodedLengths _encodedLengths = encodeLengths(tileIds);
    bytes memory _dynamicData = encodeDynamic(tileIds);

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160(ownerAddress)));

    StoreCore.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData, _fieldLayout);
  }

  /**
   * @notice Set the full data using the data struct.
   */
  function set(address ownerAddress, OwnersData memory _table) internal {
    bytes memory _staticData = encodeStatic(_table.rate, _table.lastUpdateTime, _table.unclaimed);

    EncodedLengths _encodedLengths = encodeLengths(_table.tileIds);
    bytes memory _dynamicData = encodeDynamic(_table.tileIds);

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160(ownerAddress)));

    StoreSwitch.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using the data struct.
   */
  function _set(address ownerAddress, OwnersData memory _table) internal {
    bytes memory _staticData = encodeStatic(_table.rate, _table.lastUpdateTime, _table.unclaimed);

    EncodedLengths _encodedLengths = encodeLengths(_table.tileIds);
    bytes memory _dynamicData = encodeDynamic(_table.tileIds);

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160(ownerAddress)));

    StoreCore.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData, _fieldLayout);
  }

  /**
   * @notice Decode the tightly packed blob of static data using this table's field layout.
   */
  function decodeStatic(
    bytes memory _blob
  ) internal pure returns (uint256 rate, uint256 lastUpdateTime, uint256 unclaimed) {
    rate = (uint256(Bytes.getBytes32(_blob, 0)));

    lastUpdateTime = (uint256(Bytes.getBytes32(_blob, 32)));

    unclaimed = (uint256(Bytes.getBytes32(_blob, 64)));
  }

  /**
   * @notice Decode the tightly packed blob of dynamic data using the encoded lengths.
   */
  function decodeDynamic(
    EncodedLengths _encodedLengths,
    bytes memory _blob
  ) internal pure returns (uint256[] memory tileIds) {
    uint256 _start;
    uint256 _end;
    unchecked {
      _end = _encodedLengths.atIndex(0);
    }
    tileIds = (SliceLib.getSubslice(_blob, _start, _end).decodeArray_uint256());
  }

  /**
   * @notice Decode the tightly packed blobs using this table's field layout.
   * @param _staticData Tightly packed static fields.
   * @param _encodedLengths Encoded lengths of dynamic fields.
   * @param _dynamicData Tightly packed dynamic fields.
   */
  function decode(
    bytes memory _staticData,
    EncodedLengths _encodedLengths,
    bytes memory _dynamicData
  ) internal pure returns (OwnersData memory _table) {
    (_table.rate, _table.lastUpdateTime, _table.unclaimed) = decodeStatic(_staticData);

    (_table.tileIds) = decodeDynamic(_encodedLengths, _dynamicData);
  }

  /**
   * @notice Delete all data for given keys.
   */
  function deleteRecord(address ownerAddress) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160(ownerAddress)));

    StoreSwitch.deleteRecord(_tableId, _keyTuple);
  }

  /**
   * @notice Delete all data for given keys.
   */
  function _deleteRecord(address ownerAddress) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160(ownerAddress)));

    StoreCore.deleteRecord(_tableId, _keyTuple, _fieldLayout);
  }

  /**
   * @notice Tightly pack static (fixed length) data using this table's schema.
   * @return The static data, encoded into a sequence of bytes.
   */
  function encodeStatic(uint256 rate, uint256 lastUpdateTime, uint256 unclaimed) internal pure returns (bytes memory) {
    return abi.encodePacked(rate, lastUpdateTime, unclaimed);
  }

  /**
   * @notice Tightly pack dynamic data lengths using this table's schema.
   * @return _encodedLengths The lengths of the dynamic fields (packed into a single bytes32 value).
   */
  function encodeLengths(uint256[] memory tileIds) internal pure returns (EncodedLengths _encodedLengths) {
    // Lengths are effectively checked during copy by 2**40 bytes exceeding gas limits
    unchecked {
      _encodedLengths = EncodedLengthsLib.pack(tileIds.length * 32);
    }
  }

  /**
   * @notice Tightly pack dynamic (variable length) data using this table's schema.
   * @return The dynamic data, encoded into a sequence of bytes.
   */
  function encodeDynamic(uint256[] memory tileIds) internal pure returns (bytes memory) {
    return abi.encodePacked(EncodeArray.encode((tileIds)));
  }

  /**
   * @notice Encode all of a record's fields.
   * @return The static (fixed length) data, encoded into a sequence of bytes.
   * @return The lengths of the dynamic fields (packed into a single bytes32 value).
   * @return The dynamic (variable length) data, encoded into a sequence of bytes.
   */
  function encode(
    uint256 rate,
    uint256 lastUpdateTime,
    uint256 unclaimed,
    uint256[] memory tileIds
  ) internal pure returns (bytes memory, EncodedLengths, bytes memory) {
    bytes memory _staticData = encodeStatic(rate, lastUpdateTime, unclaimed);

    EncodedLengths _encodedLengths = encodeLengths(tileIds);
    bytes memory _dynamicData = encodeDynamic(tileIds);

    return (_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Encode keys as a bytes32 array using this table's field layout.
   */
  function encodeKeyTuple(address ownerAddress) internal pure returns (bytes32[] memory) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160(ownerAddress)));

    return _keyTuple;
  }
}
