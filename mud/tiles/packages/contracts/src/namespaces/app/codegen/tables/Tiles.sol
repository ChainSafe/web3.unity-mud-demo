// SPDX-License-Identifier: MIT
pragma solidity >=0.8.24;

/* Autogenerated file. Do not edit manually. */

// Import store internals
import { IStore } from "@latticexyz/store/src/IStore.sol";
import { StoreSwitch } from "@latticexyz/store/src/StoreSwitch.sol";
import { StoreCore } from "@latticexyz/store/src/StoreCore.sol";
import { Bytes } from "@latticexyz/store/src/Bytes.sol";
import { Memory } from "@latticexyz/store/src/Memory.sol";
import { SliceLib } from "@latticexyz/store/src/Slice.sol";
import { EncodeArray } from "@latticexyz/store/src/tightcoder/EncodeArray.sol";
import { FieldLayout } from "@latticexyz/store/src/FieldLayout.sol";
import { Schema } from "@latticexyz/store/src/Schema.sol";
import { EncodedLengths, EncodedLengthsLib } from "@latticexyz/store/src/EncodedLengths.sol";
import { ResourceId } from "@latticexyz/store/src/ResourceId.sol";

// Import user types
import { BuildingType } from "../../../../codegen/common.sol";

struct TilesData {
  BuildingType building;
  address owner;
}

library Tiles {
  // Hex below is the result of `WorldResourceIdLib.encode({ namespace: "app", name: "Tiles", typeId: RESOURCE_TABLE });`
  ResourceId constant _tableId = ResourceId.wrap(0x7462617070000000000000000000000054696c65730000000000000000000000);

  FieldLayout constant _fieldLayout =
    FieldLayout.wrap(0x0015020001140000000000000000000000000000000000000000000000000000);

  // Hex-encoded key schema of (uint256, uint256, uint256)
  Schema constant _keySchema = Schema.wrap(0x006003001f1f1f00000000000000000000000000000000000000000000000000);
  // Hex-encoded value schema of (uint8, address)
  Schema constant _valueSchema = Schema.wrap(0x0015020000610000000000000000000000000000000000000000000000000000);

  /**
   * @notice Get the table's key field names.
   * @return keyNames An array of strings with the names of key fields.
   */
  function getKeyNames() internal pure returns (string[] memory keyNames) {
    keyNames = new string[](3);
    keyNames[0] = "gameId";
    keyNames[1] = "x";
    keyNames[2] = "y";
  }

  /**
   * @notice Get the table's value field names.
   * @return fieldNames An array of strings with the names of value fields.
   */
  function getFieldNames() internal pure returns (string[] memory fieldNames) {
    fieldNames = new string[](2);
    fieldNames[0] = "building";
    fieldNames[1] = "owner";
  }

  /**
   * @notice Register the table with its config.
   */
  function register() internal {
    StoreSwitch.registerTable(_tableId, _fieldLayout, _keySchema, _valueSchema, getKeyNames(), getFieldNames());
  }

  /**
   * @notice Register the table with its config.
   */
  function _register() internal {
    StoreCore.registerTable(_tableId, _fieldLayout, _keySchema, _valueSchema, getKeyNames(), getFieldNames());
  }

  /**
   * @notice Get building.
   */
  function getBuilding(uint256 gameId, uint256 x, uint256 y) internal view returns (BuildingType building) {
    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = bytes32(uint256(gameId));
    _keyTuple[1] = bytes32(uint256(x));
    _keyTuple[2] = bytes32(uint256(y));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 0, _fieldLayout);
    return BuildingType(uint8(bytes1(_blob)));
  }

  /**
   * @notice Get building.
   */
  function _getBuilding(uint256 gameId, uint256 x, uint256 y) internal view returns (BuildingType building) {
    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = bytes32(uint256(gameId));
    _keyTuple[1] = bytes32(uint256(x));
    _keyTuple[2] = bytes32(uint256(y));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 0, _fieldLayout);
    return BuildingType(uint8(bytes1(_blob)));
  }

  /**
   * @notice Set building.
   */
  function setBuilding(uint256 gameId, uint256 x, uint256 y, BuildingType building) internal {
    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = bytes32(uint256(gameId));
    _keyTuple[1] = bytes32(uint256(x));
    _keyTuple[2] = bytes32(uint256(y));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 0, abi.encodePacked(uint8(building)), _fieldLayout);
  }

  /**
   * @notice Set building.
   */
  function _setBuilding(uint256 gameId, uint256 x, uint256 y, BuildingType building) internal {
    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = bytes32(uint256(gameId));
    _keyTuple[1] = bytes32(uint256(x));
    _keyTuple[2] = bytes32(uint256(y));

    StoreCore.setStaticField(_tableId, _keyTuple, 0, abi.encodePacked(uint8(building)), _fieldLayout);
  }

  /**
   * @notice Get owner.
   */
  function getOwner(uint256 gameId, uint256 x, uint256 y) internal view returns (address owner) {
    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = bytes32(uint256(gameId));
    _keyTuple[1] = bytes32(uint256(x));
    _keyTuple[2] = bytes32(uint256(y));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 1, _fieldLayout);
    return (address(bytes20(_blob)));
  }

  /**
   * @notice Get owner.
   */
  function _getOwner(uint256 gameId, uint256 x, uint256 y) internal view returns (address owner) {
    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = bytes32(uint256(gameId));
    _keyTuple[1] = bytes32(uint256(x));
    _keyTuple[2] = bytes32(uint256(y));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 1, _fieldLayout);
    return (address(bytes20(_blob)));
  }

  /**
   * @notice Set owner.
   */
  function setOwner(uint256 gameId, uint256 x, uint256 y, address owner) internal {
    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = bytes32(uint256(gameId));
    _keyTuple[1] = bytes32(uint256(x));
    _keyTuple[2] = bytes32(uint256(y));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 1, abi.encodePacked((owner)), _fieldLayout);
  }

  /**
   * @notice Set owner.
   */
  function _setOwner(uint256 gameId, uint256 x, uint256 y, address owner) internal {
    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = bytes32(uint256(gameId));
    _keyTuple[1] = bytes32(uint256(x));
    _keyTuple[2] = bytes32(uint256(y));

    StoreCore.setStaticField(_tableId, _keyTuple, 1, abi.encodePacked((owner)), _fieldLayout);
  }

  /**
   * @notice Get the full data.
   */
  function get(uint256 gameId, uint256 x, uint256 y) internal view returns (TilesData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = bytes32(uint256(gameId));
    _keyTuple[1] = bytes32(uint256(x));
    _keyTuple[2] = bytes32(uint256(y));

    (bytes memory _staticData, EncodedLengths _encodedLengths, bytes memory _dynamicData) = StoreSwitch.getRecord(
      _tableId,
      _keyTuple,
      _fieldLayout
    );
    return decode(_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Get the full data.
   */
  function _get(uint256 gameId, uint256 x, uint256 y) internal view returns (TilesData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = bytes32(uint256(gameId));
    _keyTuple[1] = bytes32(uint256(x));
    _keyTuple[2] = bytes32(uint256(y));

    (bytes memory _staticData, EncodedLengths _encodedLengths, bytes memory _dynamicData) = StoreCore.getRecord(
      _tableId,
      _keyTuple,
      _fieldLayout
    );
    return decode(_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using individual values.
   */
  function set(uint256 gameId, uint256 x, uint256 y, BuildingType building, address owner) internal {
    bytes memory _staticData = encodeStatic(building, owner);

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = bytes32(uint256(gameId));
    _keyTuple[1] = bytes32(uint256(x));
    _keyTuple[2] = bytes32(uint256(y));

    StoreSwitch.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using individual values.
   */
  function _set(uint256 gameId, uint256 x, uint256 y, BuildingType building, address owner) internal {
    bytes memory _staticData = encodeStatic(building, owner);

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = bytes32(uint256(gameId));
    _keyTuple[1] = bytes32(uint256(x));
    _keyTuple[2] = bytes32(uint256(y));

    StoreCore.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData, _fieldLayout);
  }

  /**
   * @notice Set the full data using the data struct.
   */
  function set(uint256 gameId, uint256 x, uint256 y, TilesData memory _table) internal {
    bytes memory _staticData = encodeStatic(_table.building, _table.owner);

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = bytes32(uint256(gameId));
    _keyTuple[1] = bytes32(uint256(x));
    _keyTuple[2] = bytes32(uint256(y));

    StoreSwitch.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using the data struct.
   */
  function _set(uint256 gameId, uint256 x, uint256 y, TilesData memory _table) internal {
    bytes memory _staticData = encodeStatic(_table.building, _table.owner);

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = bytes32(uint256(gameId));
    _keyTuple[1] = bytes32(uint256(x));
    _keyTuple[2] = bytes32(uint256(y));

    StoreCore.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData, _fieldLayout);
  }

  /**
   * @notice Decode the tightly packed blob of static data using this table's field layout.
   */
  function decodeStatic(bytes memory _blob) internal pure returns (BuildingType building, address owner) {
    building = BuildingType(uint8(Bytes.getBytes1(_blob, 0)));

    owner = (address(Bytes.getBytes20(_blob, 1)));
  }

  /**
   * @notice Decode the tightly packed blobs using this table's field layout.
   * @param _staticData Tightly packed static fields.
   *
   *
   */
  function decode(
    bytes memory _staticData,
    EncodedLengths,
    bytes memory
  ) internal pure returns (TilesData memory _table) {
    (_table.building, _table.owner) = decodeStatic(_staticData);
  }

  /**
   * @notice Delete all data for given keys.
   */
  function deleteRecord(uint256 gameId, uint256 x, uint256 y) internal {
    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = bytes32(uint256(gameId));
    _keyTuple[1] = bytes32(uint256(x));
    _keyTuple[2] = bytes32(uint256(y));

    StoreSwitch.deleteRecord(_tableId, _keyTuple);
  }

  /**
   * @notice Delete all data for given keys.
   */
  function _deleteRecord(uint256 gameId, uint256 x, uint256 y) internal {
    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = bytes32(uint256(gameId));
    _keyTuple[1] = bytes32(uint256(x));
    _keyTuple[2] = bytes32(uint256(y));

    StoreCore.deleteRecord(_tableId, _keyTuple, _fieldLayout);
  }

  /**
   * @notice Tightly pack static (fixed length) data using this table's schema.
   * @return The static data, encoded into a sequence of bytes.
   */
  function encodeStatic(BuildingType building, address owner) internal pure returns (bytes memory) {
    return abi.encodePacked(building, owner);
  }

  /**
   * @notice Encode all of a record's fields.
   * @return The static (fixed length) data, encoded into a sequence of bytes.
   * @return The lengths of the dynamic fields (packed into a single bytes32 value).
   * @return The dynamic (variable length) data, encoded into a sequence of bytes.
   */
  function encode(
    BuildingType building,
    address owner
  ) internal pure returns (bytes memory, EncodedLengths, bytes memory) {
    bytes memory _staticData = encodeStatic(building, owner);

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    return (_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Encode keys as a bytes32 array using this table's field layout.
   */
  function encodeKeyTuple(uint256 gameId, uint256 x, uint256 y) internal pure returns (bytes32[] memory) {
    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = bytes32(uint256(gameId));
    _keyTuple[1] = bytes32(uint256(x));
    _keyTuple[2] = bytes32(uint256(y));

    return _keyTuple;
  }
}
